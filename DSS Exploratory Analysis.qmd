---
title: "Example"
author:
  name: "Marianna Pekar"
  affiliation: "Victoria University of Wellington"
date: today
format:
  html:
    code-fold: false
    toc: true
    link-external-newwindow: true
theme:
  light: flatly
  dark: darkly
---

# Setting Working Directory and Loading Packages and Data

```{r setup, include=FALSE}
library(dplyr)
library(ggplot2)
library(readxl)
library(tidyr)
library(gganimate)
library(gifski)
library(ggrepel)
library(writexl)
library(png)

# Load data
path_to_file <- "C:/Users/maria/OneDrive/Asztali gép/Work/Manawanui/Descriptives/manawanui_output1_total_for_release.xlsx"

data_2021 <- read_excel(path_to_file, sheet = "2021 confidentialised data")
data_2018 <- read_excel(path_to_file, sheet = "2018 confidentialised")
region_data <- read_excel(path_to_file, sheet = "Region_data")
ta_data <- read_excel(path_to_file, sheet = "TA_data")

head(data_2021)
head(data_2018)
head(region_data)
head(ta_data)

# Adjusted function to clean 'n' column only
clean_transition_data <- function(df) {
  df %>%
    mutate(n = replace(n, n == "S", "0"),    # Replace "S" with "0" in column 'n'
           n = as.numeric(n))                # Convert column 'n' to numeric
}

# Update population group name in 2018 data
data_2018$pop_group <- ifelse(data_2018$pop_group == "DSS in 2018", "DSS in Given Year", data_2018$pop_group)

# Clean data
data_2018 <- clean_transition_data(data_2018)
data_2021 <- clean_transition_data(data_2021)

# Merge datasets
merged_data <- bind_rows(data_2021, data_2018)

# View the first few rows of the merged data
head(merged_data)
```

# Data Cleaning and Transformation

```{r, include=FALSE}
# Function to clean transition counts data
clean_transition_data <- function(df) {
  df %>%
    mutate(across(-age, ~ replace(., . == "S", 0))) %>%
    mutate(across(-age, as.numeric))
}

# Read the data
data <- read_excel("C:/Users/maria/OneDrive/Asztali gép/Work/Manawanui/Markov Chain codes/Age distribution 2010-21_conf.xlsx", sheet = "Age distribution conf")

# Clean the data
data <- clean_transition_data(data)

# Reshape the data for plotting
data_long <- data %>%
  gather(key = "Year", value = "Count", -age)

# Define the colours for the groups
colors <- c("2010-2013" = "#4A1532", "2014-2018" = "#00cfe8", "2019-2021" = "#ff006e")

# Group the data by the defined periods
data_long <- data_long %>%
  mutate(Period = case_when(
    Year >= 2010 & Year <= 2013 ~ "2010-2013",
    Year >= 2014 & Year <= 2018 ~ "2014-2018",
    Year >= 2019 & Year <= 2021 ~ "2019-2021"
  ))

# Plotting Function
add_peak_labels <- function(plot, data) {
  data_peaks <- data %>%
    group_by(Year, Period) %>%
    summarise(
      Peak_0_30_Age = age[which.max(Count * (age <= 30))],
      Peak_0_30_Count = max(Count * (age <= 30)),
      Peak_31_90_Age = age[which.max(Count * (age > 30 & age <= 90))],
      Peak_31_90_Count = max(Count * (age > 30 & age <= 90))
    ) %>%
    gather(key = "Range", value = "Peak_Age", Peak_0_30_Age, Peak_31_90_Age) %>%
    gather(key = "Count_Range", value = "Peak_Count", Peak_0_30_Count, Peak_31_90_Count) %>%
    filter(substr(Range, 6, 7) == substr(Count_Range, 6, 7)) %>%
    select(Year, Period, Peak_Age, Peak_Count)
  
  plot + 
    geom_text_repel(data = data_peaks, aes(x = Peak_Age, y = Peak_Count, label = Peak_Age, color = Period), nudge_y = 50, size = 4)
}


```

# Exploratory Data Analysis

## Age Distribution Over Time



```{r gif, include=FALSE}
p <- ggplot(data_long, aes(x = age, y = Count, group = Year, color = Period)) +
  geom_line(size = 2) +
  scale_color_manual(values = colors, labels = c("2010-2013", "2014-2018", "2019-2021")) +
  labs(title = "Age Distribution Over Time",
       x = "Age",
       y = "Count",
       color = "Period") +
  theme_minimal(base_size = 15) +
  theme(plot.title = element_text(size = 20, face = "bold")) +
  scale_x_continuous(limits = c(0, 90))

# Simplify the animation step and specify the full path for the GIF file
# output_gif <- "age_distribution_animation.gif"
# animate(p + transition_states(Year, transition_length = 2, state_length = 1) + labs(title = "Age Distribution Over Time: {closest_state}"), 
#         width = 800, height = 600, renderer = gifski_renderer(output_gif))

```

![Age Distribution Over Time](age_distribution_animation.gif)


## Population Distribution by Age Group

```{r, include=FALSE}
data$age_group <- cut(data$age,
                      breaks = c(0, 4, 12, 17, 24, 44, 64, Inf),
                      labels = c("Age 0-04", "Age 05-12", "Age 13-17", "Age 18-24", 
                                 "Age 25-44", "Age 45-64", "Age 65+"),
                      right = TRUE)

colors <- c("Age 0-04" = "#4A1532", "Age 05-12" = "#00cfe8", "Age 13-17" = "#ff006e",
            "Age 18-24" = "#f95d6a", "Age 25-44" = "#ffa600", "Age 45-64" = "#bc5090",
            "Age 65+" = "#003f5c")

data_long <- data %>% 
  pivot_longer(cols = -c(age, age_group), names_to = "year", values_to = "count") %>%
  group_by(year, age_group) %>%
  summarise(total_count = sum(count), .groups = "drop")

data_long$year <- as.integer(as.character(data_long$year))

bar_plot <- ggplot(data_long, aes(x = year, y = total_count, fill = age_group)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.75)) +
  scale_fill_manual(values = colors) +
  labs(title = "Population Distribution by Age Group",
       x = "Year",
       y = "Total Population",
       fill = "Age Group") +
  theme_minimal(base_size = 15) +
  theme(plot.title = element_text(size = 20, face = "bold"),
        legend.position = "bottom",
        axis.text.x = element_text(angle = 45, hjust = 1))

print(bar_plot)


```

## Plot tabs

## Plot tabs

:::{.panel-tabset}
```{r panel, results='asis'}
#| warning: false

# Define the plots and their titles
plot_list <- list(p, bar_plot)
headings <- c("Age Distribution Over Time", "Population Distribution by Age Group")

# Use a loop to generate the headings and insert plots
for (i in seq_along(plot_list)) {
  cat("## ", headings[i], "\n")
  print(plot_list[[i]])
  cat('\n\n')
}

```
:::


# Prevalence Calculation

```{r prevalence}
calculate_prevalence_ag <- function(data, target_indicator, target_value) {
  # Filter the data for the specified indicator
  prepared_data <- data %>%
    filter(indicator == target_indicator)
  
  # Convert target_value to the appropriate type based on data column type
  if (is.numeric(data$value[1])) {
    target_value <- as.numeric(target_value)
  }
  
  # Calculate prevalence for each population group and age group
  prevalence_data <- prepared_data %>%
    group_by(Year, pop_group, age_group) %>%  # Include age_group in the grouping
    summarise(
      Total_n = sum(n, na.rm = TRUE),
      Count_with_value = sum(n[value == target_value], na.rm = TRUE),
      Prevalence = (Count_with_value / Total_n) * 100,
      .groups = 'drop'
    )
  
  # Calculate prevalence for the total population
  total_prevalence <- prepared_data %>%
    group_by(Year, age_group) %>%
    summarise(
      pop_group = "Total Population",
      Total_n = sum(n, na.rm = TRUE),
      Count_with_value = sum(n[value == target_value], na.rm = TRUE),
      Prevalence = (Count_with_value / Total_n) * 100,
      .groups = 'drop'
    )
  
  # Combine the prevalence data for population groups and total population
  prevalence_data <- bind_rows(prevalence_data, total_prevalence)
  
  # Print the prevalence data
  print(prevalence_data)
  
  # Plotting the prevalence data with an additional facet for age groups
  plot <- ggplot(prevalence_data, aes(x = pop_group, y= Prevalence, fill = as.factor(Year))) +
    geom_bar(stat = "identity", position = position_dodge(0.9), width = 0.8) +
    labs(title = paste("Prevalence of", target_indicator, "by Population Group, Age Group, and Year (value =", target_value, ")"),
         x = "Population Group",
         y = "Prevalence (%)",
         fill = "Year") +
    facet_wrap(~age_group, scales = "free_x") +  # Facet by age group
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    scale_fill_brewer(palette = "Set1")
  
  return(list(Prevalence_Data = prevalence_data, Plot = plot))
}

```


# Final remarks

This workshop is primarily designed to introduce you to tools and useful features in Quarto. Regardless of your workflow (which this template may not fit!), hopefully you will have the tools to make sharing results and colaborating with supervisors and researchers much easier.

# Useful links

[Biostats](https://biostats-r.github.io/biostats/quarto/) - very useful resource for authoring documents in Quarto.

[Awsome Quarto](https://github.com/mcanouil/awesome-quarto) - a big list of Quarto things.

[Generating a DOI using Zenodo](https://docs.github.com/en/repositories/archiving-a-github-repository/referencing-and-citing-content)

### References

References will [appear here](https://quarto.org/docs/authoring/citations.html#bibliography-generation)!

::: {#refs}
:::